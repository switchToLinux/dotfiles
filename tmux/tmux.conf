
#####################################
# 快捷键
#设置前缀为Ctrl + a
# set -g prefix C-a
#解除Ctrl+b 与前缀的对应关系
#unbind C-b

############################################################
##  快捷键 不需要使用 prefix 前缀
############################################
#X# 快捷键(M 表示 Alt )
#X# 
############################################
bind -n M-r source-file ~/.tmux.conf \; display "重新加载完成!"

bind -n M-q kill-pane  #关闭当前面板(panel)
bind -n M-a display-panes # 显示当前窗口(window)的所有面板(panel)
bind -n M-d detach # 脱离当前会话(session)，返回终端
bind -n M-w kill-window # Alt+w: 关闭当前窗口(window)

bind -n M-\\ run-shell 'option_name="status"; status=$(tmux show -gv ${option_name}); if [[ "$status" == "on" ]]; then new_state=off;  else new_state=on ; fi ;tmux set -g ${option_name} "$new_state";'

# 快捷键列表显示
bind -n M-/ run-shell "awk -F'bind -n ' '\$0~/^bind -n/{ gsub(\"\#.*\",\"\"); print ; next; }\$0~/^#X# /{print \$0 }' ~/.tmux.conf | sed 's/^bind -n //g;s/M-/Alt+/g;s/C-/Ctrl+/g;' | awk '/^#/{print}/^Alt|^Ctrl/{printf(\"%-15s\", \$1); \$1=\"\"; printf(\"%-100.100s\\n\",\$0); }' |less -R"
bind -n M-\? list-keys

# 切换鼠标状态(使用-g参数，在所有会话生效)
bind -n M-m run-shell 'option_name="mouse"; status=$(tmux show -gv ${option_name}); if [[ "$status" == "on" ]]; then new_state=off;  else new_state=on ; fi ;tmux set -g ${option_name} "$new_state"; echo "${option_name}状态: $new_state" '

# Alt+-: 同步显示所有面板(不使用-g参数，只在当前会话生效)
bind -n M-\- run-shell 'option_name="synchronize-panes"; status=$(tmux show -v ${option_name}); if [[ "$status" == "on" ]]; then new_state=off;  else new_state=on ; fi ;tmux set ${option_name} "$new_state"; echo "${option_name}状态: $new_state" '


#X# Session 管理
#X# 
# 重命名当前会话
bind -n M-F2 command-prompt -I "rename-session "

#bind -n F3 choose-tree -Z -F "#{?session_attached,◉,○} #{session_name} | 窗口: #{session_windows} | #{?window_active,▶ ,  }#{window_index} #{window_name}"
bind -n F3 choose-tree -Z
# bind -n F3 choose-session -Z -F "#{?session_attached,◉,○} #{session_name} | 窗口: #{session_windows} | #{?window_active,▶ ,  }#{window_index} #{window_name}"
bind -n M-` choose-session -Z  # 列出所有session会话列表


#X# --- 窗口 (Window) 管理 ---
#X# 
bind -n M-n new-window   #创建新窗口
bind -n F2 command-prompt -I "rename-window "   # 重命名当前窗口

bind -n M-\[ previous-window  #切换到上一个窗口
bind -n M-\] next-window     #切换到下一个窗口

# Alt+1/2/3...0: 切换到指定窗口（索引从1开始）
bind -n M-1 select-window -t :=1
bind -n M-2 select-window -t :=2
bind -n M-3 select-window -t :=3
bind -n M-4 select-window -t :=4
bind -n M-5 select-window -t :=5
bind -n M-6 select-window -t :=6
bind -n M-7 select-window -t :=7
bind -n M-8 select-window -t :=8
bind -n M-9 select-window -t :=9
bind -n M-0 select-window -t :=10
bind -n M-\; command-prompt -I ""

#X# --- 面板 (Pane) 管理 ---
#X# 
bind -n M-Enter split-window -h # 新建横向分割面板
bind -n M-v split-window -v  #新建垂直分割面板

bind -n M-x run-shell "tmux split-window -v; tmux select-layout tiled" # 新建平铺布局的面板(动态调整面板大小)
bind -n M-z resize-pane -Z # 最大化当前面板

# Alt+Tab: 切换到上一个面板
bind -n M-Tab select-window -l
bind -n M-Space select-layout -n


# Alt+h/j/k/l: 在面板间移动（Vim 风格）
bind -n M-h select-pane -L
bind -n M-j select-pane -D
bind -n M-k select-pane -U
bind -n M-l select-pane -R


# Alt+Shift+H/J/K/L: 调整面板大小
bind -n M-H resize-pane -L 5
bind -n M-J resize-pane -D 5
bind -n M-K resize-pane -U 5
bind -n M-L resize-pane -R 5


bind -n M-s break-pane  #将当前面板转为新窗口


############################################
##  配置环境


set -g default-shell /bin/zsh


# 设置 pane 索引从 1 开始（与窗口一致）
set -g base-index 1
set-window-option -g pane-base-index 1

#copy-mode 将快捷键设置为vi 模式
set -g mode-keys vi
set -g status-keys vi

# 启用鼠标支持（可选，方便拖动调整大小或选择）
set -g mouse on

# 取消默认的鼠标拖动结束绑定
# copy-mode for emacs
# copy-mode-vi for vi
unbind -Tcopy-mode-vi MouseDragEnd1Pane
# 启用鼠标选中文本自动复制
# reference: https://github.com/tmux/tmux/wiki/Getting-Started
# search for "MouseDragEnd1Pane" for more info
if-shell "command -v wl-copy >/dev/null 2>&1" "bind -Tcopy-mode-vi MouseDragEnd1Pane send -X copy-pipe 'wl-copy'"
if-shell "command -v xclip >/dev/null 2>&1" "bind -Tcopy-mode-vi MouseDragEnd1Pane send -X copy-pipe 'xclip -selection clipboard'"
if-shell "command -v pbcopy >/dev/null 2>&1" "bind -Tcopy-mode-vi MouseDragEnd1Pane send -X copy-pipe 'pbcopy'"



# 提高响应速度
set -sg escape-time 0


#####################################################
# 插件管理

# prefix + I(大写) : 安装插件
# prefix + U(大写) : 更新插件
# prefix + alt + u : 清理插件(不在plugin list中)
# prefix + Ctrl-s - save
# prefix + Ctrl-r - restore

# 会话管理插件

set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'

set -g @continuum-save-interval '15'
set -g @continuum-restore 'on'
set -g @resurrect-capture-pane-contents 'on'
#
# Other config ...

run -b '~/.tmux/plugins/tpm/tpm'

############################################
# 主题设置
#  可用颜色列表： black, red, green, yellow, blue, magenta, cyan, white, brightblack, brightred, brightgreen, brightyellow, brightblue, brightmagenta, brightcyan, brightwhite
#  可用样式列表： bold, underline, italic, reverse, blinking, fast-blinking, standout, dim, faint, normal
#  可用背景颜色列表： default, black, red, green, yellow, blue, magenta, cyan, white, brightblack, brightred, brightgreen, brightyellow, brightblue, brightmagenta, brightcyan, brightwhite
#  可用前景颜色列表： default, black, red, green, yellow, blue, magenta, cyan, white, brightblack, brightred, brightgreen, brightyellow, brightblue, brightmagenta, brightcyan, brightwhite
#
############################################



set -g status-interval 1
set -g status-position top
set -g status-style bg=black,fg=white


set -g window-status-format "#[fg=blue,bg=default]#I #F #W"
set -g window-status-current-format "#[fg=white,bold,bg=default]#[fg=red,bg=default]#I #F #W#[fg=white,bg=default]"
set -g window-status-current-style 'underscore'


set -g pane-border-style "fg=white,bold,bg=default"
set -g pane-active-border-style "fg=brightred,bold,bg=default"

help_tips="M+/(Help)"


# 状态栏左侧信息

set -g status-left-length 80
set -g status-left "#[fg=cyan,bold,bg=blue][#{help_tips}]"
set -ga status-left "#[fg=brightblack,nobold,bg=magenta,bold] [#S] " # session name

# 状态栏右侧信息
set -g status-right-length 100
set -g status-right "#{pane_title}"
set -ga status-right "#[fg=white,bold,bg=brightred] #{status-keys} "
set -ga status-right "#[fg=green,bold,bg=green][🖱️ #{?mouse,ON,OFF}]"

set -ga status-right '#[fg=cyan,bold,bg=gray][⌚ %H:%M:%S %A %Y/%m/%d]'

set -ga status-right '#[fg=black,bold,bg=cray] #(uptime -p) '
if-shell "uname | grep -q Linux"  "set -ga status-right '#[fg=black,bold,bg=cyan] #(uname) 🐧'"
if-shell "uname | grep -q Darwin" "set -ga status-right '#[fg=black,bold,bg=white] #(uname) '"
